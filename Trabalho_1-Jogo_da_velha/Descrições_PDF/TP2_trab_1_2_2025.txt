# Guia Completo: TDD para Jogo da Velha - Trabalho Pr√°tico 2

## üìã ESPECIFICA√á√ÉO DO TRABALHO

### Objetivo
Implementar uma fun√ß√£o que verifica o estado do jogo da velha usando **TDD (Test-Driven Development)** com todas as ferramentas de qualidade conforme especificado no documento oficial.

### Representa√ß√£o do Jogo
- Matriz 3x3 de inteiros
- `0`: posi√ß√£o vazia
- `1`: posi√ß√£o com X  
- `2`: posi√ß√£o com O

### Retornos da fun√ß√£o `verificaVelha()`:
- `1`: X venceu
- `2`: O venceu  
- `0`: Empate
- `-1`: Jogo indefinido (ex: apenas um X)
- `-2`: Jogo imposs√≠vel (ex: todas posi√ß√µes s√£o X)

### Exemplo de Matriz:
```
[ 2, 0, 1]     Representa:    O _ X
[ 0, 2, 0]                    _ O _
[ 1, 0, 1]                    X _ X
```

## üõ†Ô∏è FERRAMENTAS OBRIGAT√ìRIAS

### 1. **Framework de Testes** (Catch2 ou GTest)
- **Escolhido**: Catch2 (header-only)
- Arquivo: `catch.hpp`
- Sintaxe: `TEST_CASE()`, `REQUIRE()`, `CHECK()`

### 2. **Verificador de Cobertura** (gcov)
- Flags obrigat√≥rias: `-ftest-coverage -fprofile-arcs`
- Meta: **80% de cobertura m√≠nima por m√≥dulo**
- Comando: `gcov velha.cpp`

### 3. **Verificador Est√°tico** (cppcheck)
- Comando: `cppcheck --enable=warning .`
- Meta: Zero erros/warnings no SEU c√≥digo
- Usar desde o in√≠cio

### 4. **Verificador Din√¢mico** (Valgrind)
- Comando: `valgrind --leak-check=full ./programa`
- Meta: Zero vazamentos de mem√≥ria
- Usar desde o in√≠cio

### 5. **Verificador de Estilo** (cpplint)
- Padr√£o Google C++ Style Guide
- Comando: `python3 cpplint.py *.cpp *.hpp`
- Usar desde o in√≠cio

### 6. **Controle de Vers√£o** (Git)
- **FATOR PRINCIPAL DE AVALIA√á√ÉO**
- Cada teste/implementa√ß√£o/refatora√ß√£o = 1 commit
- Diret√≥rio `.git` deve ser enviado compactado

### 7. **Depura√ß√£o** (GDB)
- Usar para debugar o c√≥digo
- Compilar com flag `-g`

## üîÑ METODOLOGIA TDD - CICLO OBRIGAT√ìRIO

**CRITICAL: Cada passo = 1 commit no Git**

```
1. RED:     Escreve teste que FALHA ‚Üí git commit -m "RED: [descri√ß√£o do teste]"
2. GREEN:   C√≥digo M√çNIMO que passa ‚Üí git commit -m "GREEN: [implementa√ß√£o m√≠nima]"  
3. REFACTOR: Melhora c√≥digo (opcional) ‚Üí git commit -m "REFACTOR: [descri√ß√£o da melhoria]"
```

**"Para cada teste que voc√™ criar, para cada teste que voc√™ passar, para toda refatora√ß√£o, voc√™ deve fazer um git commit. Este √© o principal fator avaliado neste trabalho."**

## üöÄ SETUP INICIAL COMPLETO

### 1. Criar estrutura do projeto:
```bash
mkdir TP2_jogo_velha
cd TP2_jogo_velha
git init
git config user.name "Seu Nome"
git config user.email "seu@email.com"
```

### 2. Arquivos necess√°rios:
- `velha.hpp` (header da biblioteca)
- `velha.cpp` (implementa√ß√£o da biblioteca)
- `testa_velha.cpp` (arquivo de testes)
- `catch.hpp` (framework de testes)
- `cpplint.py` (verificador de estilo)
- `Makefile` (build system)
- `.gitignore` (arquivos a ignorar)
- `leiame.txt` (instru√ß√µes de compila√ß√£o)

### 3. Makefile completo com todas as ferramentas:
```makefile
CXX = g++
CXXFLAGS = -std=c++11 -Wall -Wextra -g -ftest-coverage -fprofile-arcs
LDFLAGS = -lgcov

SOURCES = velha.cpp
OBJECTS = $(SOURCES:.cpp=.o)
TEST_SOURCES = testa_velha.cpp
TEST_OBJECTS = $(TEST_SOURCES:.cpp=.o)
EXECUTABLE = testa_velha

all: $(EXECUTABLE)

$(EXECUTABLE): $(TEST_OBJECTS) $(OBJECTS)
    $(CXX) $(CXXFLAGS) -o $@ $^ $(LDFLAGS)

%.o: %.cpp
    $(CXX) $(CXXFLAGS) -c $< -o $@

test: $(EXECUTABLE)
    ./$(EXECUTABLE)

coverage: test
    gcov $(SOURCES)
    @echo "=== RELAT√ìRIO DE COBERTURA ==="
    @echo "Arquivos .gcov gerados:"
    @ls -la *.gcov

cppcheck:
    @echo "=== VERIFICA√á√ÉO EST√ÅTICA ==="
    cppcheck --enable=warning --std=c++11 --suppress=missingIncludeSystem .

cpplint:
    @echo "=== VERIFICA√á√ÉO DE ESTILO ==="
    python3 cpplint.py --filter=-legal/copyright *.cpp *.hpp

valgrind: $(EXECUTABLE)
    @echo "=== VERIFICA√á√ÉO DIN√ÇMICA ==="
    valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./$(EXECUTABLE)

debug: $(EXECUTABLE)
    gdb ./$(EXECUTABLE)

all-checks: test cppcheck cpplint coverage valgrind
    @echo "=== TODAS AS VERIFICA√á√ïES CONCLU√çDAS ==="

clean:
    rm -f $(OBJECTS) $(TEST_OBJECTS) $(EXECUTABLE)
    rm -f *.gcno *.gcda *.gcov
    @echo "Arquivos limpos"

.PHONY: all test coverage cppcheck cpplint valgrind debug all-checks clean
```

### 4. .gitignore:
```
# Arquivos gerados na compila√ß√£o
*.o
*.gcno
*.gcda
*.gcov
testa_velha

# Logs e tempor√°rios
*.log
*.tmp

# Backups do editor
*~
*.swp
*.bak
```

### 5. leiame.txt:
```
JOGO DA VELHA - TDD
===================

COMPILA√á√ÉO:
-----------
make

EXECU√á√ÉO DOS TESTES:
-------------------
make test

VERIFICA√á√ïES DE QUALIDADE:
-------------------------
make cppcheck    # An√°lise est√°tica
make cpplint     # Verifica√ß√£o de estilo
make coverage    # Cobertura de c√≥digo
make valgrind    # Vazamentos de mem√≥ria

VERIFICA√á√ÉO COMPLETA:
--------------------
make all-checks

LIMPEZA:
--------
make clean

DEPEND√äNCIAS:
------------
- g++ com suporte C++11
- gcov
- cppcheck
- valgrind
- python3 (para cpplint)

ESTRUTURA:
----------
velha.hpp       - Interface da biblioteca
velha.cpp       - Implementa√ß√£o da biblioteca  
testa_velha.cpp - Testes unit√°rios
catch.hpp       - Framework de testes
cpplint.py      - Verificador de estilo
Makefile        - Sistema de build
```

## üìù PRIMEIRO CICLO TDD - EXEMPLO COMPLETO

### 1. RED - Estrutura inicial e primeiro teste:

```cpp
// velha.hpp
#ifndef VELHA_HPP
#define VELHA_HPP

/**
 * Verifica o estado atual do jogo da velha
 * @param tabuleiro Matriz 3x3 representando o jogo
 * @return 1 se X venceu, 2 se O venceu, 0 se empate, 
 *         -1 se indefinido, -2 se imposs√≠vel
 */
int verificaVelha(int tabuleiro[3][3]);

#endif  // VELHA_HPP
```

```cpp
// velha.cpp
#include "velha.hpp"

int verificaVelha(int tabuleiro[3][3]) {
    // Implementa√ß√£o ser√° feita no GREEN
    return 0;  // Retorna algo que far√° o teste falhar
}
```

```cpp
// testa_velha.cpp
#define CATCH_CONFIG_MAIN
#include "catch.hpp"
#include "velha.hpp"

TEST_CASE("Tabuleiro vazio deve retornar indefinido", "[velha][basico]") {
    int tabuleiro[3][3] = {{0, 0, 0},
                           {0, 0, 0},
                           {0, 0, 0}};
    
    REQUIRE(verificaVelha(tabuleiro) == -1);
}
```

**Comandos RED:**
```bash
make test  # DEVE FALHAR
git add .
git commit -m "RED: Tabuleiro vazio deve retornar indefinido (-1)"
```

### 2. GREEN - Implementa√ß√£o m√≠nima:

```cpp
// velha.cpp
#include "velha.hpp"

int verificaVelha(int tabuleiro[3][3]) {
    return -1;  // Implementa√ß√£o m√≠nima para passar o teste
}
```

**Comandos GREEN:**
```bash
make test  # DEVE PASSAR
git add .
git commit -m "GREEN: Implementa verificaVelha retornando -1 para tabuleiro vazio"
```

### 3. Verifica√ß√µes de qualidade:
```bash
make cppcheck  # Verificar problemas est√°ticos
make cpplint   # Verificar estilo
make coverage  # Verificar cobertura
make valgrind  # Verificar vazamentos
```

## üîÅ FLUXO DE TRABALHO CONT√çNUO

### Para cada novo teste, seguir rigorosamente:

```bash
# 1. PENSAR: Qual pr√≥ximo comportamento testar?
# 2. ESCREVER: Novo teste que falha
vim testa_velha.cpp
make test              # DEVE FALHAR
git add .
git commit -m "RED: [descri√ß√£o espec√≠fica do teste]"

# 3. IMPLEMENTAR: C√≥digo m√≠nimo para passar
vim velha.cpp
make test              # DEVE PASSAR
git add .
git commit -m "GREEN: [descri√ß√£o espec√≠fica da implementa√ß√£o]"

# 4. REFATORAR: Se necess√°rio melhorar c√≥digo
vim velha.cpp
make test              # DEVE CONTINUAR PASSANDO
git add .
git commit -m "REFACTOR: [descri√ß√£o espec√≠fica da melhoria]"

# 5. VERIFICAR: Qualidade periodicamente
make all-checks
```

## üìä SEQU√äNCIA DE TESTES SUGERIDA (TDD)

### Ordem l√≥gica de desenvolvimento:

1. **Tabuleiro vazio** ‚Üí retorna -1 (indefinido)
2. **X vence primeira linha** ‚Üí retorna 1
3. **O vence primeira coluna** ‚Üí retorna 2  
4. **X vence diagonal principal** ‚Üí retorna 1
5. **O vence diagonal secund√°ria** ‚Üí retorna 2
6. **Todas as outras linhas** ‚Üí X e O vencem
7. **Todas as outras colunas** ‚Üí X e O vencem
8. **Empate** ‚Üí retorna 0
9. **Jogo indefinido** (poucos movimentos) ‚Üí retorna -1
10. **Jogo imposs√≠vel** (muito de um jogador) ‚Üí retorna -2
11. **Jogo imposs√≠vel** (dois vencedores) ‚Üí retorna -2
12. **Casos extremos** ‚Üí v√°rias impossibilidades

### Exemplo de testes espec√≠ficos:

```cpp
TEST_CASE("X vence na primeira linha", "[velha][vitoria][linha]") {
    int tabuleiro[3][3] = {{1, 1, 1},
                           {2, 2, 0},
                           {0, 0, 0}};
    REQUIRE(verificaVelha(tabuleiro) == 1);
}

TEST_CASE("O vence na primeira coluna", "[velha][vitoria][coluna]") {
    int tabuleiro[3][3] = {{2, 1, 1},
                           {2, 1, 0},
                           {2, 0, 0}};
    REQUIRE(verificaVelha(tabuleiro) == 2);
}

TEST_CASE("Jogo empatado", "[velha][empate]") {
    int tabuleiro[3][3] = {{1, 2, 1},
                           {2, 1, 2},
                           {2, 1, 2}};
    REQUIRE(verificaVelha(tabuleiro) == 0);
}

TEST_CASE("Jogo imposs√≠vel - muitos X", "[velha][impossivel]") {
    int tabuleiro[3][3] = {{1, 1, 1},
                           {1, 1, 1},
                           {1, 1, 1}};
    REQUIRE(verificaVelha(tabuleiro) == -2);
}
```

## ‚ö†Ô∏è PONTOS CR√çTICOS E REGRAS IMPORTANTES

### 1. **Commits obrigat√≥rios (PRINCIPAL CRIT√âRIO DE AVALIA√á√ÉO)**
- Cada teste que voc√™ criar ‚Üí 1 commit
- Cada teste que voc√™ passar ‚Üí 1 commit  
- Cada refatora√ß√£o ‚Üí 1 commit
- Mensagens descritivas e espec√≠ficas

### 2. **Arquivos obrigat√≥rios na entrega**
- `velha.c` ou `velha.cpp` 
- `velha.h` ou `velha.hpp`
- `testa_velha.c` ou `testa_velha.cpp`
- `Makefile`
- `.git/` (diret√≥rio completo)
- `leiame.txt`

### 3. **Metas de qualidade**
- **Cobertura**: M√≠nimo 80% por m√≥dulo
- **cppcheck**: Zero warnings/erros no SEU c√≥digo
- **cpplint**: Conformidade total com Google Style
- **Valgrind**: Zero vazamentos de mem√≥ria
- **Testes**: Todos passando sempre

### 4. **Desenvolvimento modular obrigat√≥rio**
- Separar interface (`.hpp`) da implementa√ß√£o (`.cpp`)
- Arquivo de testes separado
- Usar GDB para depura√ß√£o

### 5. **Uso das ferramentas desde o in√≠cio**
- N√£o deixar para verificar qualidade no final
- Corrigir problemas conforme aparecem
- Automatizar verifica√ß√µes no Makefile

## üéØ COMANDOS ESSENCIAIS DI√ÅRIOS

### Verifica√ß√£o antes de cada commit:
```bash
make test && make cppcheck && make cpplint
```

### Verifica√ß√£o completa peri√≥dica:
```bash
make all-checks
```

### Ver hist√≥rico TDD:
```bash
git log --oneline
git log --graph --oneline --all
```

### Verificar cobertura:
```bash
make coverage
cat velha.cpp.gcov  # Ver linhas n√£o cobertas
```

### Depura√ß√£o com GDB:
```bash
make debug
# Dentro do GDB:
# (gdb) break verificaVelha
# (gdb) run
# (gdb) print tabuleiro[0][0]
# (gdb) step
# (gdb) continue
```

## üì¶ ESTRUTURA FINAL PARA ENTREGA

```
06_12345_Jose.zip
‚îú‚îÄ‚îÄ .git/                    # Hist√≥rico TDD (OBRIGAT√ìRIO)
‚îú‚îÄ‚îÄ velha.cpp               # Implementa√ß√£o
‚îú‚îÄ‚îÄ velha.hpp               # Interface  
‚îú‚îÄ‚îÄ testa_velha.cpp         # Testes
‚îú‚îÄ‚îÄ catch.hpp               # Framework
‚îú‚îÄ‚îÄ cpplint.py              # Verificador estilo
‚îú‚îÄ‚îÄ Makefile                # Build system
‚îú‚îÄ‚îÄ leiame.txt              # Instru√ß√µes compila√ß√£o
‚îî‚îÄ‚îÄ .gitignore              # Arquivos ignorados
```

### Formato do arquivo:
- **Nome**: `matricula_primeiro_nome.zip`
- **Exemplo**: `06_12345_Jose.zip`
- **Data limite**: 24/09/2025
- **Local**: aprender3.unb.br

## üìã CHECKLIST FINAL

### Antes da entrega, verificar:

- [ ] Diret√≥rio `.git` existe e tem hist√≥rico TDD completo
- [ ] `make test` - todos os testes passam
- [ ] `make coverage` - cobertura ‚â• 80%
- [ ] `make cppcheck` - zero warnings/erros
- [ ] `make cpplint` - 100% conformidade Google Style
- [ ] `make valgrind` - zero vazamentos
- [ ] `git log --oneline` - mostra ciclos RED-GREEN-REFACTOR
- [ ] Arquivos obrigat√≥rios presentes
- [ ] `leiame.txt` com instru√ß√µes claras
- [ ] Nome do arquivo correto: `matricula_nome.zip`

## üèÜ EXEMPLO DE HIST√ìRICO GIT ADEQUADO

```bash
$ git log --oneline
a1b2c3d RED: Jogo imposs√≠vel com dois vencedores deve retornar -2
e4f5g6h GREEN: Implementa verifica√ß√£o de m√∫ltiplos vencedores  
i7j8k9l REFACTOR: Extrai fun√ß√£o verificaMultiplosVencedores
m0n1o2p RED: Empate deve retornar 0
q3r4s5t GREEN: Implementa verifica√ß√£o de empate
u6v7w8x RED: O vence diagonal secund√°ria deve retornar 2
y9z0a1b GREEN: Implementa verifica√ß√£o diagonal secund√°ria
c2d3e4f RED: X vence diagonal principal deve retornar 1  
g5h6i7j GREEN: Implementa verifica√ß√£o diagonal principal
k8l9m0n RED: O vence primeira coluna deve retornar 2
o1p2q3r GREEN: Implementa verifica√ß√£o de colunas
s4t5u6v RED: X vence primeira linha deve retornar 1
w7x8y9z GREEN: Implementa verifica√ß√£o de linhas
a0b1c2d RED: Tabuleiro vazio deve retornar indefinido (-1)
e3f4g5h GREEN: Implementa verificaVelha retornando -1
i6j7k8l Estrutura inicial do projeto
```

**LEMBRE-SE**: O hist√≥rico Git √© o principal crit√©rio de avalia√ß√£o. Ele deve demonstrar claramente que voc√™ seguiu TDD com ciclos RED-GREEN-REFACTOR bem definidos!